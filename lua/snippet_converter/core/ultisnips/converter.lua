local base_converter = require("snippet_converter.core.converter")
local io = require("snippet_converter.utils.io")
local export_utils = require("snippet_converter.utils.export_utils")

local M = {}

M.convert = function(snippet, source_format)
  local trigger = snippet.trigger
  -- Literal " in trigger
  if trigger:match([["]]) then
    trigger = string.format("!%s!", trigger)
    -- Multi-word trigger
  elseif trigger:match("%s") then
    trigger = string.format([["%s"]], trigger)
  end
  local description = ""
  -- Description must be quoted
  if snippet.description then
    description = string.format([[ "%s"]], snippet.description)
  end

  local options = ""
  if source_format == "ultisnips" then
    if snippet.options then
      options = " " .. snippet.options
    end
  end
  local body = base_converter.convert_ast(snippet.body, base_converter.visit_node())
  return string.format("snippet %s%s%s\n%s\nendsnippet", trigger, description, options, body)
end

local HEADER_STRING =
  "# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)"

-- Takes a list of converted snippets for a particular filetype,
-- separates them by newlines and exports them to a file.
-- @param converted_snippets string[] @A list of strings where each item is a snippet string to be exported
-- @param filetype string @The filetype of the snippets
-- @param output_dir string @The absolute path to the directory (or file) to write the snippets to
-- @param context []? @A table of additional snippet contexts optionally provided the source parser (example: global code)
M.export = function(converted_snippets, filetype, output_path, context)
  local header = HEADER_STRING
  if context then
    print(1)
    local context_string = table.concat(
      vim.tbl_map(function(ctx)
        return ctx.global_code
      end, context),
      "\n"
    )
    print(context_string)
    header = ("%s\n%s"):format(header, context_string)
  end
  local snippet_lines = export_utils.snippet_strings_to_lines(converted_snippets, "\n", header, nil)
  output_path = export_utils.get_output_path(output_path, filetype, "snippets")
  io.write_file(snippet_lines, output_path)
end

return M
